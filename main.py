import os
import discord
import json
import asyncio
import shutil
import atexit
import traceback
from threading import Lock
from datetime import datetime, timedelta
from discord.ext import commands
from discord import app_commands

# ======================
# CONFIGURA√á√ïES GLOBAIS
# ======================
TOKEN = os.getenv("DISCORD_TOKEN")
GUILD_ID = 709705286083936256

# Configura√ß√£o de persist√™ncia
PERSISTENT_MODE = True
DATA_DIR = "data"
DADOS_FILE = os.path.join(DATA_DIR, "dados.json")
BACKUP_DIR = os.path.join(DATA_DIR, "backups")
POSICOES = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]
CANAL_RANKING_ID = 1360294622768926901
MINIMO_JOGADORES = 2

# Lock para opera√ß√µes de arquivo
file_lock = Lock()

# ======================
# INICIALIZA√á√ÉO DO BOT
# ======================
intents = discord.Intents.default()
intents.message_content = True  # Habilita inten√ß√£o de conte√∫do de mensagem
intents.members = True  # Necess√°rio para buscar membros
bot = commands.Bot(command_prefix="!", intents=intents, help_command=None)

# ======================
# SISTEMA DE PERSIST√äNCIA
# ======================
def init_persistence():
    """Garante a estrutura de arquivos e migra dados se necess√°rio"""
    try:
        # Cria diret√≥rios se n√£o existirem
        if not os.path.exists(DATA_DIR):
            os.makedirs(DATA_DIR)
            print(f"üìÅ Diret√≥rio '{DATA_DIR}' criado")

        if not os.path.exists(BACKUP_DIR):
            os.makedirs(BACKUP_DIR)
            print(f"üìÅ Diret√≥rio de backups '{BACKUP_DIR}' criado")

        # Cria arquivo se n√£o existir
        if not os.path.exists(DADOS_FILE):
            with open(DADOS_FILE, "w") as f:
                json.dump({"partidas": [], "pontuacao": {}}, f)
            print(f"üìÑ Arquivo '{DADOS_FILE}' criado com estrutura inicial")

    except Exception as e:
        print(f"‚ùå Erro na inicializa√ß√£o: {str(e)}")
        traceback.print_exc()

def backup_corrupt_file():
    """Faz backup de um arquivo possivelmente corrompido"""
    try:
        if not os.path.exists(DADOS_FILE) or os.path.getsize(DADOS_FILE) == 0:
            return

        corrupt_backup = os.path.join(BACKUP_DIR, f"dados_corruptos_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json")
        shutil.copy2(DADOS_FILE, corrupt_backup)
        print(f"‚ö†Ô∏è Backup do arquivo corrompido salvo em: {corrupt_backup}")
        return corrupt_backup
    except Exception as e:
        print(f"‚ö†Ô∏è Falha ao criar backup do arquivo corrompido: {e}")
        return None

def criar_backup_automatico():
    """Cria um backup autom√°tico dos dados"""
    try:
        if not os.path.exists(DADOS_FILE) or os.path.getsize(DADOS_FILE) == 0:
            return

        # Backup di√°rio (sobrescreve se j√° existir para o dia)
        backup_file = os.path.join(BACKUP_DIR, f"dados_backup_{datetime.now().strftime('%Y%m%d')}.json")
        shutil.copy2(DADOS_FILE, backup_file)

        # Backup com timestamp (mant√©m hist√≥rico)
        timestamp_backup = os.path.join(BACKUP_DIR, f"dados_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json")
        shutil.copy2(DADOS_FILE, timestamp_backup)

        print(f"‚úÖ Backup autom√°tico criado em: {backup_file}")
    except Exception as e:
        print(f"‚ö†Ô∏è Falha ao criar backup autom√°tico: {e}")
        traceback.print_exc()

def carregar_dados():
    """Carrega os dados com tratamento robusto de erros"""
    if not os.path.exists(DADOS_FILE):
        return {"partidas": [], "pontuacao": {}}

    try:
        with file_lock:
            # Verifica se o arquivo n√£o est√° vazio
            if os.path.getsize(DADOS_FILE) == 0:
                return {"partidas": [], "pontuacao": {}}

            with open(DADOS_FILE, "r", encoding="utf-8") as f:
                dados = json.load(f)

                # Migra√ß√£o para nova estrutura se necess√°rio
                if not isinstance(dados, dict):
                    dados = {
                        "partidas": dados,
                        "pontuacao": {}
                    }
                    # Calcula pontua√ß√£o acumulada inicial
                    for partida in dados["partidas"]:
                        total_jogadores = len(partida["jogadores"])
                        for pos, jogador_id in enumerate(partida["jogadores"]):
                            pontos = calcular_pontos(pos, total_jogadores)
                            dados["pontuacao"][jogador_id] = dados["pontuacao"].get(jogador_id, 0) + pontos
                    salvar_dados(dados)

                return dados
    except json.JSONDecodeError as e:
        print(f"‚ö†Ô∏è Erro ao decodificar JSON (arquivo pode estar corrompido): {e}")
        corrupt_file = backup_corrupt_file()
        if corrupt_file:
            print(f"‚ö†Ô∏è Arquivo corrompido salvo em: {corrupt_file}")
        return {"partidas": [], "pontuacao": {}}
    except Exception as e:
        print(f"‚ö†Ô∏è Erro inesperado ao carregar dados: {e}")
        traceback.print_exc()
        return {"partidas": [], "pontuacao": {}}

def salvar_dados(dados):
    """Salva os dados com tratamento robusto de erros"""
    try:
        # Primeiro salva em um arquivo tempor√°rio
        temp_file = DADOS_FILE + ".tmp"

        with file_lock:
            with open(temp_file, "w", encoding="utf-8") as f:
                json.dump(dados, f, indent=2, ensure_ascii=False)

            # Verifica se o arquivo tempor√°rio foi criado corretamente
            if not os.path.exists(temp_file) or os.path.getsize(temp_file) == 0:
                raise ValueError("Arquivo tempor√°rio n√£o foi criado corretamente")

            # Se chegou aqui sem erros, substitui o arquivo original
            if os.path.exists(DADOS_FILE):
                os.replace(temp_file, DADOS_FILE)
            else:
                shutil.move(temp_file, DADOS_FILE)

        print("‚úÖ Dados salvos com sucesso")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao salvar dados: {e}")
        traceback.print_exc()

        # Remove o arquivo tempor√°rio se existir
        if os.path.exists(temp_file):
            try:
                os.remove(temp_file)
            except:
                pass
        raise

# Executa durante a importa√ß√£o
init_persistence()

# ======================
# FUN√á√ïES AUXILIARES
# ======================
def calcular_pontos(pos, total_jogadores):
    if pos == 0: return 3
    elif pos == 1: return 1
    elif pos == total_jogadores - 1: return -1
    else: return 0

def filtrar_partidas_por_periodo_e_jogo(dados, periodo=None, jogo=None):
    agora = datetime.now()    
    if periodo == "semana":
        limite = agora - timedelta(weeks=1)
    elif periodo == "mes":
        limite = agora - timedelta(days=30)
    elif periodo == "ano":
        limite = agora - timedelta(days=365)
    else:
        limite = None

    partidas = dados.get("partidas", [])
    return [p for p in partidas if (not limite or datetime.fromisoformat(p["data"]) >= limite) and 
                               (not jogo or p["jogo"].lower() == jogo.lower())]

def obter_jogos_unicos(dados):
    partidas = dados.get("partidas", [])
    return sorted({p["jogo"].lower() for p in partidas})

async def criar_embed_ranking(partidas, titulo):
    estatisticas = {}

    for partida in partidas:
        total_jogadores = len(partida["jogadores"])
        for pos, jogador_id in enumerate(partida["jogadores"]):
            pontos = calcular_pontos(pos, total_jogadores)

            if jogador_id not in estatisticas:
                estatisticas[jogador_id] = {
                    "pontos": 0,
                    "partidas": 0,
                    "vitorias": 0,
                    "fracassos": 0
                }

            estatisticas[jogador_id]["pontos"] += pontos
            estatisticas[jogador_id]["partidas"] += 1

            if pos == 0:
                estatisticas[jogador_id]["vitorias"] += 1
            if pos == total_jogadores - 1:
                estatisticas[jogador_id]["fracassos"] += 1

    ranking = []
    for jogador_id, stats in estatisticas.items():
        try:
            jogador = await bot.get_guild(GUILD_ID).fetch_member(int(jogador_id))
            media = stats["pontos"] / stats["partidas"] if stats["partidas"] > 0 else 0
            ranking.append({
                "nome": jogador.display_name,
                "pontos": stats["pontos"],
                "partidas": stats["partidas"],
                "media": round(media, 2),
                "vitorias": stats["vitorias"],
                "fracassos": stats["fracassos"]
            })
        except:
            continue

    ranking.sort(key=lambda x: x["pontos"], reverse=True)

    mensagem = f"**üèÜ {titulo.upper()}**\n\n"
    for pos, jogador in enumerate(ranking[:10], start=1):
        emoji = POSICOES[pos-1] if pos <= len(POSICOES) else f"{pos}Ô∏è‚É£"
        mensagem += (
            f"**{emoji} {jogador['nome']} | Total: {jogador['pontos']} pts**\n"
            f"üìä Partidas: {jogador['partidas']}\n"
            f"üìà M√©dia: {jogador['media']} pts/partida\n"
            f"ü•á Vit√≥rias: {jogador['vitorias']}\n"
            f"üíÄ Fracassos: {jogador['fracassos']}\n\n"
        )

    return mensagem.strip()

# ======================
# COMANDOS DE GERENCIAMENTO DE DADOS
# ======================
@bot.tree.command(name="get_data", description="üì• Baixa o arquivo de dados (apenas admin)")
@app_commands.default_permissions(administrator=True)
async def download_data(interaction: discord.Interaction):
    """Envia o arquivo de dados atual"""
    try:
        dados = carregar_dados()

        # Garante que o arquivo existe
        if not os.path.exists(DADOS_FILE):
            with open(DADOS_FILE, "w") as f:
                json.dump(dados, f)

        await interaction.response.send_message(
            "üì§ Aqui est√° o arquivo de dados atual:",
            file=discord.File(DADOS_FILE),
            ephemeral=True
        )
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Erro ao preparar arquivo para download: {str(e)}",
            ephemeral=True
        )

@bot.tree.command(name="view_data", description="üëÅÔ∏è Mostra os dados atuais (apenas admin)")
@app_commands.default_permissions(administrator=True)
async def view_data(interaction: discord.Interaction):
    """Mostra os dados atuais formatados"""
    try:
        dados = carregar_dados()

        # Formata os dados para exibi√ß√£o
        formatted_data = json.dumps(dados, indent=2, ensure_ascii=False)

        # Divide em partes se for muito grande
        if len(formatted_data) > 1500:
            parts = [formatted_data[i:i+1500] for i in range(0, len(formatted_data), 1500)]
            await interaction.response.send_message(
                "üìä Dados atuais (parte 1/{}):```json\n{}```".format(len(parts), parts[0]),
                ephemeral=True
            )
            for part in parts[1:]:
                await interaction.followup.send(
                    "```json\n{}```".format(part),
                    ephemeral=True
                )
        else:
            await interaction.response.send_message(
                f"üìä Dados atuais:```json\n{formatted_data}```",
                ephemeral=True
            )
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Erro ao exibir dados: {str(e)}",
            ephemeral=True
        )

# ======================
# COMANDOS DE REGISTRO
# ======================
@bot.tree.command(name="game", description="Registra uma partida competitiva")
@app_commands.describe(
    jogo="Nome do jogo (ex: Uno, Xadrez)",
    duracao="Dura√ß√£o (ex: 1h30m)",
    jogador1="1¬∫ lugar (vencedor)",
    jogador2="2¬∫ lugar",
    jogador3="3¬∫ lugar (opcional)",
    jogador4="4¬∫ lugar (opcional)",
    jogador5="5¬∫ lugar (opcional)",
    jogador6="6¬∫ lugar (opcional)",
    jogador7="7¬∫ lugar (opcional)",
    jogador8="8¬∫ lugar (opcional)"
)
async def registrar_partida(interaction: discord.Interaction, jogo: str, duracao: str, 
                          jogador1: discord.Member, jogador2: discord.Member,
                          jogador3: discord.Member = None, jogador4: discord.Member = None,
                          jogador5: discord.Member = None, jogador6: discord.Member = None,
                          jogador7: discord.Member = None, jogador8: discord.Member = None):

    jogadores = [j for j in [jogador1, jogador2, jogador3, jogador4, 
                            jogador5, jogador6, jogador7, jogador8] if j is not None]

    if len(jogadores) < MINIMO_JOGADORES:
        return await interaction.response.send_message(
            f"‚ùå M√≠nimo de {MINIMO_JOGADORES} jogadores para registrar!",
            ephemeral=True
        )

    try:
        dados = carregar_dados()

        # Cria a nova partida
        nova_partida = {
            "jogo": jogo,
            "duracao": duracao,
            "data": datetime.now().isoformat(),
            "jogadores": [str(j.id) for j in jogadores]
        }

        # Adiciona √† lista de partidas
        dados["partidas"].append(nova_partida)

        # Atualiza pontua√ß√£o acumulada
        total_jogadores = len(jogadores)
        for pos, jogador in enumerate(jogadores):
            pontos = calcular_pontos(pos, total_jogadores)
            jogador_id = str(jogador.id)
            dados["pontuacao"][jogador_id] = dados["pontuacao"].get(jogador_id, 0) + pontos

        salvar_dados(dados)

        # Monta mensagem de resultado
        resultado = f"üéÆ {jogo} | ‚è±Ô∏è {duracao}\n\n"
        for idx, jogador in enumerate(jogadores):
            pontos = calcular_pontos(idx, len(jogadores))
            resultado += f"{POSICOES[idx]} {jogador.display_name} | {pontos:+} ponto{'s' if pontos != 1 else ''}\n"

        # Adiciona pontua√ß√£o acumulada
        resultado += "\nüìä Pontua√ß√£o Acumulada:\n"
        for jogador in jogadores:
            jogador_id = str(jogador.id)
            resultado += f"{jogador.display_name}: {dados['pontuacao'].get(jogador_id, 0)} pts\n"

        await interaction.response.send_message(resultado)
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Erro ao registrar partida: {str(e)}",
            ephemeral=True
        )
        traceback.print_exc()

# ======================
# COMANDOS DE CONSULTA
# ======================
@bot.tree.command(name="jogos", description="Lista todos os jogos registrados")
async def listar_jogos(interaction: discord.Interaction):
    try:
        dados = carregar_dados()
        jogos = obter_jogos_unicos(dados)

        if not jogos:
            return await interaction.response.send_message("‚ùå Nenhum jogo registrado ainda!", ephemeral=True)

        mensagem = "**üé≤ Jogos Registrados:**\n\n" + "\n".join(f"‚Ä¢ {jogo.capitalize()}" for jogo in jogos)
        await interaction.response.send_message(mensagem)
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Erro ao listar jogos: {str(e)}",
            ephemeral=True
        )

@bot.tree.command(name="rank", description="Mostra o ranking geral")
@app_commands.describe(jogo="(Opcional) Filtra por um jogo espec√≠fico")
async def rank_geral(interaction: discord.Interaction, jogo: str = None):
    try:
        dados = carregar_dados()
        partidas = filtrar_partidas_por_periodo_e_jogo(dados, None, jogo)
        titulo = "Ranking Geral" + (f" - {jogo.capitalize()}" if jogo else "")
        mensagem = await criar_embed_ranking(partidas, titulo)
        await interaction.response.send_message(mensagem)
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Erro ao gerar ranking: {str(e)}",
            ephemeral=True
        )

@bot.tree.command(name="rank_semanal", description="Mostra o ranking da semana")
@app_commands.describe(jogo="(Opcional) Filtra por um jogo espec√≠fico")
async def rank_semanal(interaction: discord.Interaction, jogo: str = None):
    try:
        dados = carregar_dados()
        partidas = filtrar_partidas_por_periodo_e_jogo(dados, "semana", jogo)
        titulo = "Ranking Semanal" + (f" - {jogo.capitalize()}" if jogo else "")
        mensagem = await criar_embed_ranking(partidas, titulo)
        await interaction.response.send_message(mensagem)
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Erro ao gerar ranking semanal: {str(e)}",
            ephemeral=True
        )

@bot.tree.command(name="rank_mensal", description="Mostra o ranking do m√™s")
@app_commands.describe(jogo="(Opcional) Filtra por um jogo espec√≠fico")
async def rank_mensal(interaction: discord.Interaction, jogo: str = None):
    try:
        dados = carregar_dados()
        partidas = filtrar_partidas_por_periodo_e_jogo(dados, "mes", jogo)
        titulo = "Ranking Mensal" + (f" - {jogo.capitalize()}" if jogo else "")
        mensagem = await criar_embed_ranking(partidas, titulo)
        await interaction.response.send_message(mensagem)
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Erro ao gerar ranking mensal: {str(e)}",
            ephemeral=True
        )

@bot.tree.command(name="rank_anual", description="Mostra o ranking do ano")
@app_commands.describe(jogo="(Opcional) Filtra por um jogo espec√≠fico")
async def rank_anual(interaction: discord.Interaction, jogo: str = None):
    try:
        dados = carregar_dados()
        partidas = filtrar_partidas_por_periodo_e_jogo(dados, "ano", jogo)
        titulo = "Ranking Anual" + (f" - {jogo.capitalize()}" if jogo else "")
        mensagem = await criar_embed_ranking(partidas, titulo)
        await interaction.response.send_message(mensagem)
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Erro ao gerar ranking anual: {str(e)}",
            ephemeral=True
        )

@bot.tree.command(name="rank_all", description="Mostra o ranking de todos os jogos")
async def rank_all(interaction: discord.Interaction):
    try:
        dados = carregar_dados()
        jogos = obter_jogos_unicos(dados)

        if not jogos:
            return await interaction.response.send_message("‚ùå Nenhuma partida registrada ainda!", ephemeral=True)

        await interaction.response.defer()

        mensagem_final = ""
        for jogo in jogos:
            partidas = filtrar_partidas_por_periodo_e_jogo(dados, None, jogo)
            if partidas:
                ranking = await criar_embed_ranking(partidas, f"Ranking - {jogo.capitalize()}")
                mensagem_final += f"{ranking}\n\n"

        if not mensagem_final:
            return await interaction.followup.send("‚ùå Nenhum ranking dispon√≠vel!")

        # Divide a mensagem se for muito grande
        partes = [mensagem_final[i:i+2000] for i in range(0, len(mensagem_final), 2000)]
        for parte in partes:
            await interaction.followup.send(parte)
    except Exception as e:
        await interaction.followup.send(
            f"‚ùå Erro ao gerar rankings: {str(e)}",
            ephemeral=True
        )

# ======================
# COMANDOS DE BACKUP E MANUTEN√á√ÉO
# ======================
@bot.tree.command(name="backup", description="üîµ Cria um backup dos dados (apenas admin)")
@app_commands.default_permissions(administrator=True)
async def criar_backup(interaction: discord.Interaction):
    """Cria um backup manual dos dados"""
    try:
        criar_backup_automatico()
        await interaction.response.send_message(
            "‚úÖ Backup criado com sucesso!",
            ephemeral=True
        )
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Erro ao criar backup: {str(e)}",
            ephemeral=True
        )

@bot.tree.command(name="download_backup", description="üîµ Baixa o arquivo de dados (apenas admin)")
@app_commands.default_permissions(administrator=True)
async def download_backup(interaction: discord.Interaction):
    """Permite baixar o arquivo de dados atual"""
    try:
        if not os.path.exists(DADOS_FILE) or os.path.getsize(DADOS_FILE) == 0:
            return await interaction.response.send_message(
                "‚ùå Nenhum dado dispon√≠vel para download",
                ephemeral=True
            )

        await interaction.response.send_message(
            "üì§ Aqui est√° o arquivo de dados atual:",
            file=discord.File(DADOS_FILE),
            ephemeral=True
        )
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Erro ao preparar arquivo para download: {str(e)}",
            ephemeral=True
        )

@bot.tree.command(name="debug_persistencia", description="Mostra informa√ß√µes do sistema de arquivos")
async def debug(interaction: discord.Interaction):
    try:
        backups = [f for f in os.listdir(BACKUP_DIR) if f.startswith("dados_backup_")]
        backups.sort(reverse=True)

        info = (
            f"üîß **Debug - Sistema de Arquivos**\n"
            f"Modo Persistente: `{PERSISTENT_MODE}`\n"
            f"Localiza√ß√£o dos dados: `{os.path.abspath(DADOS_FILE)}`\n"
            f"Arquivo existe: `{os.path.exists(DADOS_FILE)}`\n"
            f"Tamanho: `{os.path.getsize(DADOS_FILE) if os.path.exists(DADOS_FILE) else 0} bytes`\n"
            f"√öltima modifica√ß√£o: `{datetime.fromtimestamp(os.path.getmtime(DADOS_FILE)) if os.path.exists(DADOS_FILE) else 'N/A'}`\n"
            f"\n**Backups dispon√≠veis:**\n"
            f"Total: {len(backups)}\n"
            f"Mais recente: `{backups[0] if backups else 'Nenhum'}`"
        )
        await interaction.response.send_message(info, ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Erro ao coletar informa√ß√µes: {str(e)}",
            ephemeral=True
        )

@bot.tree.command(name="reset_data", description="üî¥ RESETA todos os dados (apenas admin)")
@app_commands.default_permissions(administrator=True)
async def reset_data(interaction: discord.Interaction, confirmacao: str):
    """
    ‚ö†Ô∏è Comando perigoso! Requer confirma√ß√£o expl√≠cita
    """
    if confirmacao.lower() != "confirmar-reset-total":
        return await interaction.response.send_message(
            "‚ùå Confirma√ß√£o inv√°lida! Use `confirmar-reset-total` para resetar.",
            ephemeral=True
        )

    try:
        # Cria backup antes de resetar
        criar_backup_automatico()

        with open(DADOS_FILE, "w") as f:
            json.dump([], f)

        await interaction.response.send_message(
            "‚úÖ Banco de dados resetado com sucesso! Todos os registros foram apagados.",
            ephemeral=True
        )
        print(f"‚ö†Ô∏è Dados resetados por {interaction.user.name}")
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Erro ao resetar: {str(e)}",
            ephemeral=True
        )

# ======================
# SISTEMA AUTOM√ÅTICO
# ======================
async def enviar_rankings_automaticos():
    await bot.wait_until_ready()
    canal = bot.get_channel(CANAL_RANKING_ID)
    if not canal:
        print(f"‚ùå Canal de rankings ({CANAL_RANKING_ID}) n√£o encontrado!")
        return

    while not bot.is_closed():
        now = datetime.now()

        try:
            # Domingo √†s 23:59 - Ranking Semanal
            if now.weekday() == 6 and now.hour == 23 and now.minute == 59:
                await enviar_ranking_automatico("semana", "Ranking Semanal", canal)
                criar_backup_automatico()

            # √öltimo dia do m√™s √†s 23:59 - Ranking Mensal
            if (now + timedelta(days=1)).month != now.month and now.hour == 23 and now.minute == 59:
                await enviar_ranking_automatico("mes", "Ranking Mensal", canal)
                criar_backup_automatico()

            # 31/12 √†s 23:59 - Ranking Anual
            if now.month == 12 and now.day == 31 and now.hour == 23 and now.minute == 59:
                await enviar_ranking_automatico("ano", "Ranking Anual", canal)
                criar_backup_automatico()

            await asyncio.sleep(60)
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no sistema autom√°tico: {e}")
            await asyncio.sleep(60)

async def enviar_ranking_automatico(periodo, titulo, canal):
    try:
        dados = carregar_dados()
        jogos = obter_jogos_unicos(dados)

        if not jogos:
            return

        for jogo in jogos:
            partidas = filtrar_partidas_por_periodo_e_jogo(dados, periodo, jogo)
            if partidas:
                mensagem = await criar_embed_ranking(partidas, f"{titulo} - {jogo.capitalize()}")
                await canal.send(mensagem)
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao enviar ranking autom√°tico: {e}")

# ======================
# EVENTOS DO BOT
# ======================
@bot.event
async def on_ready():
    print(f"\n‚úÖ Bot conectado como {bot.user.name}")
    print(f"üìå Modo persistente: {'ATIVADO' if PERSISTENT_MODE else 'DESATIVADO'}")
    print(f"üìÅ Local dos dados: {os.path.abspath(DADOS_FILE)}")
    print(f"üîç Verifica√ß√£o: Arquivo existe? {os.path.exists(DADOS_FILE)}")
    print(f"üìÇ Backups: {len(os.listdir(BACKUP_DIR)) if os.path.exists(BACKUP_DIR) else 0} arquivos")

    try:
        synced = await bot.tree.sync()
        print(f"‚úÖ {len(synced)} comandos sincronizados")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao sincronizar comandos: {e}")

    await bot.change_presence(activity=discord.Activity(
        type=discord.ActivityType.watching,
        name="/game e /rank"
    ))
    bot.loop.create_task(enviar_rankings_automaticos())
    print("‚úÖ Tarefas autom√°ticas iniciadas")

# ======================
# INICIALIZA√á√ÉO
# ======================
if __name__ == "__main__":
    # Garante que os diret√≥rios existam
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR)
    if not os.path.exists(BACKUP_DIR):
        os.makedirs(BACKUP_DIR)

    # Cria arquivo de dados se n√£o existir
    if not os.path.exists(DADOS_FILE):
        with open(DADOS_FILE, "w") as f:
            json.dump({"partidas": [], "pontuacao": {}}, f)

    # Registra backup autom√°tico ao sair
    atexit.register(criar_backup_automatico)

    try:
        bot.run(TOKEN)
    except Exception as e:
        print(f"‚ùå Erro fatal: {e}")
        traceback.print_exc()
        # Garante um backup final antes de sair
        criar_backup_automatico()